{"version":3,"sources":["Components/Pagination/index.js","Components/DataTable/index.js","App.js","serviceWorker.js","index.js"],"names":["Pagination","props","onPageLengthChange","e","pageLengthInput","value","setState","currentPage","onPrevPage","state","onGotoPage","onNextPage","pages","pageNo","currentPageInput","_getPaginationButtons","text","classNames","key","id","className","onClick","onCurrentPageChange","this","totalRecords","pageLength","Math","ceil","pageSelector","type","min","ref","input","defaultValue","onChange","prevButton","nextButton","buttons","push","max","i","nextProps","prevState","Component","DataTable","_preSearchData","onDragOver","preventDefault","onDragStart","source","dataTransfer","setData","onDrop","target","getData","headers","srcHeader","targetHeader","temp","index","renderTableHeader","sort","a","b","map","header","title","accessor","width","sortby","descending","th","style","textAlign","data-col","draggable","renderNoData","colSpan","length","noData","renderContent","data","pagedData","pagination","enabled","row","rowIdx","keyField","tds","contents","data-id","data-row","content","onSort","slice","dom","ReactDOM","findDOMNode","colIndex","undefined","parentNode","cellIndex","colTitle","dataset","col","sortVal","onSearch","searchData","filter","show","fieldName","fieldValue","inputText","searchType","toString","toLowerCase","indexOf","split","onAddTopic","addTopicValue","console","log","alert","onClickAddTopic","createList","low","high","diff","list","renderSearch","search","searchInputs","idx","inputId","fixedValue","parseInt","data-idx","height","val","name","fontSize","renderTable","headerView","contentView","renderAddForm","onClickSearch","addTopic","topicName","category","duration","startDate","endDate","trainerType","trainers","attendees","teamName","remarks","addInputs","onClickCancel","renderToolbar","getPagedData","startOfRecord","endOfRecord","React","App","ready","dataType","axios","get","then","Response","error","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.131c4a84.chunk.js","sourcesContent":["import React, {Fragment, Component } from 'react';\r\nimport './pagination.css';\r\n\r\nexport default class Pagination extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentPage: props.currentPage || 1\r\n        }\r\n        \r\n    }\r\n\r\n    onPageLengthChange = (e) => {\r\n        this.props.onPageLengthChange(this.pageLengthInput.value);\r\n        this.setState({ currentPage : 1})\r\n    }\r\n\r\n    onPrevPage = (e) => {\r\n        if (this.state.currentPage === 1) return;\r\n        this.onGotoPage(this.state.currentPage - 1);\r\n    }\r\n\r\n    onNextPage = (e) => {\r\n        if (this.state.currentPage > this.pages - 1) return;\r\n        this.onGotoPage(this.state.currentPage + 1);\r\n    }\r\n\r\n    onGotoPage = (pageNo) => {\r\n        if (pageNo === this.state.currentPage) {\r\n            return;\r\n        }\r\n        if (this.currentPageInput) {\r\n            this.currentPageInput.value = pageNo;\r\n        }\r\n\r\n        this.setState({\r\n            currentPage: pageNo\r\n        });\r\n\r\n        this.props.onGotoPage(pageNo);\r\n    }\r\n      \r\n    _getPaginationButtons = (text) => {\r\n        let classNames = 'btn btn-light';\r\n        \r\n        // May need refactor\r\n        if (this.state.currentPage === text) {\r\n            classNames = 'btn btn-secondary';\r\n        }\r\n\r\n        let html = (\r\n            <button key={`btn-${text}`}\r\n                id={`btn-${text}`}\r\n                className={classNames}\r\n                onClick={(e)=>{this.onGotoPage(text)}}\r\n            >{text}\r\n            </button>\r\n        );\r\n        return html;\r\n    }\r\n\r\n    onCurrentPageChange = (e) => {\r\n        if (this.currentPageInput.value >= this.pages) {\r\n            this.currentPageInput.value = this.pages;\r\n        }\r\n        this.setState({\r\n            currentPage: this.currentPageInput.value\r\n        });\r\n\r\n        this.props.onGotoPage(this.currentPageInput.value);\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (nextProps.currentPage !== prevState.currentPage) {\r\n            return {\r\n               currentPage: nextProps.currentPage \r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let {totalRecords,pageLength} = this.props;\r\n        let { currentPage } = this.state;\r\n        let pages = Math.ceil(totalRecords / pageLength);\r\n        this.pages = pages;\r\n\r\n        let pageSelector = (\r\n            <Fragment key=\"f-page-selector\">\r\n                <span key=\"page-selector\" className=\"page-selector\">\r\n                    Rows per page -\r\n                    <input key=\"page-input\"\r\n                      type=\"number\"\r\n                      min=\"1\"\r\n                      ref={(input)=>this.pageLengthInput = input}\r\n                      defaultValue={pageLength || 5}\r\n                      onChange={this.onPageLengthChange}\r\n                    />\r\n                    - Showing <b>{(currentPage-1)*pageLength+1} \r\n                    - {(currentPage*pageLength > totalRecords)? totalRecords : currentPage*pageLength}\r\n                    </b> of <b>{totalRecords}</b> Records\r\n                </span>\r\n            </Fragment>\r\n        );\r\n\r\n        let prevButton = (\r\n            <button key=\"prev\"\r\n                className=\"btn btn-dark\"\r\n                onClick={this.onPrevPage}>\r\n                {\"< Previous\"}\r\n            </button>\r\n\r\n        );\r\n\r\n        let nextButton = (\r\n            <button key=\"next\"\r\n                className=\"btn btn-dark\"\r\n                onClick={this.onNextPage}>\r\n                {\"Next >\"}\r\n            </button>\r\n\r\n        );\r\n\r\n        let buttons = [];\r\n        if (this.props.type === \"short\" || (this.props.totalRecords/this.props.pageLength) > 15) {\r\n            buttons.push(\r\n                <input key=\"currentPageInput\"\r\n                    className=\"current-page-input\"\r\n                    type=\"number\"\r\n                    max={this.pages}\r\n                    defaultValue={this.state.currentPage}\r\n                    ref={(input)=>{this.currentPageInput=input}}\r\n                    onChange={this.onCurrentPageChange} />\r\n            );\r\n        }else if (this.props.type === \"long\") {\r\n            for(let i = 1; i <= pages; i++) {\r\n                buttons.push(this._getPaginationButtons(i));\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"pagination\">\r\n            {\r\n                [pageSelector, prevButton, buttons, nextButton]\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './datatable.css';\r\nimport Pagination from '../Pagination';\r\n\r\nexport default class DataTable extends React.Component {\r\n    _preSearchData = null;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: props.title || 'Data-Table',\r\n            headers: props.headers,\r\n            data: props.data,\r\n            pagedData: props.data,\r\n            sortby: null,\r\n            descending: null,\r\n            search: false,\r\n            pageLength: this.props.pagination.pageLength || 5,\r\n            currentPage: 1,\r\n            addTopic: false,\r\n        }\r\n\r\n        this.keyField = props.keyField || \"id\"; // TODO: revisit this logic\r\n        this.noData = props.noData || \"No records found!\";\r\n        this.width = props.width || \"100%\";\r\n\r\n        // Add pagination support\r\n        this.pagination = this.props.pagination || {};\r\n    }\r\n\r\n    onDragOver = (e) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    onDragStart = (e, source) => {\r\n        e.dataTransfer.setData('text/plain', source);\r\n    }\r\n\r\n    onDrop = (e, target) => {\r\n        e.preventDefault();\r\n        let source = e.dataTransfer.getData('text/plain');\r\n        let headers = [...this.state.headers];\r\n        let srcHeader = headers[source];\r\n        let targetHeader = headers[target];\r\n\r\n        let temp = srcHeader.index;\r\n        srcHeader.index = targetHeader.index;\r\n        targetHeader.index = temp;\r\n\r\n        this.setState({\r\n            headers\r\n        });\r\n    }\r\n\r\n    renderTableHeader = () => {\r\n        let { headers } = this.state;\r\n        headers.sort((a, b) => {\r\n            if (a.index > b.index) return 1;\r\n            return -1;\r\n        });\r\n\r\n        let headerView = headers.map((header, index) => {\r\n            let title = header.title;\r\n            let accessor = header.accessor;\r\n            let width = header.width;\r\n\r\n            if (this.state.sortby === index) {\r\n                title += this.state.descending ? '\\u2193' : '\\u2191';\r\n            }\r\n\r\n            return (\r\n                <th key={accessor}\r\n                    ref={(th) => this[accessor] = th}\r\n                    style={{ width: width, textAlign: \"center\" }}\r\n                    data-col={accessor}\r\n                    // onDoubleClick = {()=>{alert('Double Click');}}\r\n                    onDragStart={(e) => this.onDragStart(e, index)}\r\n                    onDragOver={this.onDragOver}\r\n                    onDrop={(e) => { this.onDrop(e, index) }}>\r\n                    <span draggable data-col={accessor} className=\"header-cell\" style={{ width: width, textAlign: \"center\" }}>\r\n                        {title}\r\n                    </span>\r\n                </th>\r\n            );\r\n        });\r\n\r\n        return headerView;\r\n    }\r\n\r\n    renderNoData = () => {\r\n        return (\r\n            <tr>\r\n                <td colSpan={this.props.headers.length}>\r\n                    {this.noData}\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    /* onUpdate = (e) => {\r\n        e.preventDefault();\r\n        let input = e.target.firstChild;\r\n        let header = this.state.headers[this.state.edit.cell];\r\n        let rowId = this.state.edit.rowId;\r\n \r\n        this.setState({\r\n            edit: null\r\n        });\r\n \r\n        this.props.onUpdate &&\r\n            this.props.onUpdate(header.accessor, rowId, input.value);\r\n    }\r\n \r\n    onFormReset = (e) => {\r\n        if (e.keyCode === 27) {  // ESC key\r\n            this.setState({\r\n                edit: null\r\n            });\r\n        }\r\n    }\r\n    onShowEditor = (e) => {\r\n       let id = e.target.dataset.id;\r\n       this.setState({\r\n           edit: {\r\n               row: parseInt(e.target.dataset.row, 10),\r\n               rowId: id,\r\n               cell: e.target.cellIndex\r\n           }\r\n       })\r\n   } */\r\n\r\n\r\n    renderContent = () => {\r\n\r\n        let { headers, data, pagedData } = this.state;\r\n        data = this.pagination.enabled ? pagedData : data;\r\n        let contentView = data.map((row, rowIdx) => {\r\n            let id = row[this.keyField];\r\n            // let edit = this.state.edit;\r\n\r\n            let tds = headers.map((header, index) => {\r\n                let contents = row[header.accessor];\r\n\r\n                /* if (this.props.edit) {\r\n                    if (header.dataType && (header.dataType === \"number\" ||\r\n                        header.dataType === \"string\") &&\r\n                        header.accessor !== this.keyField) {\r\n                        if (edit && edit.row === rowIdx && edit.cell === index) {\r\n                            content = (\r\n                                <form onSubmit={this.onUpdate}>\r\n                                    <input type=\"text\" defaultValue={content}\r\n                                        onKeyUp={this.onFormReset} />\r\n                                </form>\r\n                            );\r\n                        }\r\n\r\n                    }\r\n                } */\r\n\r\n                return (\r\n                    <td key={index} data-id={id} data-row={rowIdx}>\r\n                        {(header.accessor === 'trainers' || header.accessor === 'attendees') ?\r\n                            contents.map((content) => (\r\n                                content + \", \"\r\n                            )) :\r\n                            contents}\r\n                        {(header.accessor === 'duration') ? ' Hours' : ''}\r\n                    </td>\r\n                );\r\n            });\r\n            return (\r\n                <tr key={rowIdx} style={{ textAlign: \"center\" }}>\r\n                    {tds}\r\n                </tr>\r\n            );\r\n        });\r\n        return contentView;\r\n    }\r\n\r\n    onSort = (e) => {\r\n        let data = this.state.data.slice(); // Give new array\r\n        let dom = ReactDOM.findDOMNode(e.target);\r\n        let colIndex = dom.parentNode.cellIndex === undefined ? dom.cellIndex : dom.parentNode.cellIndex;\r\n        let colTitle = e.target.dataset.col;\r\n\r\n\r\n        let descending = !this.state.descending;\r\n\r\n        data.sort((a, b) => {\r\n            let sortVal = 0;\r\n            if (a[colTitle] < b[colTitle]) {\r\n                sortVal = -1;\r\n            } else if (a[colTitle] > b[colTitle]) {\r\n                sortVal = 1;\r\n            }\r\n            if (descending) {\r\n                sortVal = sortVal * -1;\r\n            }\r\n            return sortVal;\r\n        });\r\n\r\n        this.setState({\r\n            data: data,\r\n            pagedData: data,\r\n            sortby: colIndex,\r\n            descending\r\n        }, () => {\r\n            if (this.pagination.enabled) {\r\n                this.onGotoPage(1);\r\n            }\r\n        });\r\n    }\r\n\r\n    onSearch = (e) => {\r\n        let { headers } = this.state;\r\n        // Filter the records\r\n        let searchData = this._preSearchData.filter((row) => {\r\n            let show = true;\r\n            for (let i = 1; i < headers.length; i++) {\r\n                let fieldName = headers[i].accessor;\r\n                let fieldValue = row[fieldName];\r\n                let inputId = 'inp' + fieldName;\r\n                let inputText = this[inputId];\r\n\r\n                if (fieldValue === '') {//If FieldValue Not Present                \r\n                    show = true;\r\n                } else {\r\n                    if (headers[i].searchType === \"list\") {\r\n                        show = (inputText.value === '' || fieldValue.toString() === inputText.value);\r\n                    } else if (headers[i].searchType === \"input\") {\r\n                        show = fieldValue.toString().toLowerCase().indexOf(inputText.value.toLowerCase()) > -1;\r\n                    } else if (headers[i].searchType === \"date\") {\r\n                        if (inputText !== '') {\r\n                            inputText = inputText.toString().split(\"-\")[2] + \"-\" +\r\n                                inputText.toString().split(\"-\")[1] + \"-\" +\r\n                                inputText.toString().split(\"-\")[0];\r\n                            show = (fieldValue.toString() === inputText);\r\n                        }\r\n                    }\r\n                    if (!show) {//FieldValue Present Still no Match Then Cut the Data\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return show;\r\n        });\r\n        // Update the state\r\n        this.setState({\r\n            data: searchData,\r\n            pagedData: searchData,\r\n            totalRecords: searchData.length\r\n        }, () => {\r\n            if (this.pagination.enabled) {\r\n                this.onGotoPage(1);\r\n            }\r\n        });\r\n    }\r\n\r\n    onAddTopic = (addTopicValue) => {\r\n        let { headers } = this.state;\r\n        addTopicValue['trainers'] = addTopicValue['trainers'].toString().split(\",\").filter(e => !(e === ''));\r\n        addTopicValue['attendees'] = addTopicValue['attendees'].toString().split(\",\").filter(e => !(e === ''));\r\n\r\n        for (let index = 1; index < headers.length; index++) {\r\n            if (addTopicValue[headers[index].accessor].length === 0) {\r\n                console.log(headers[index].accessor, addTopicValue[headers[index].accessor]);\r\n                alert(\"Please Enter All The Fields\");\r\n                return;\r\n            }\r\n        }\r\n        addTopicValue['startDate'] = addTopicValue['startDate'].toString().split(\"-\")[2] + \"-\" +\r\n            addTopicValue['startDate'].toString().split(\"-\")[1] + \"-\" +\r\n            addTopicValue['startDate'].toString().split(\"-\")[0];\r\n\r\n        addTopicValue['endDate'] = addTopicValue['endDate'].toString().split(\"-\")[2] + \"-\" +\r\n            addTopicValue['endDate'].toString().split(\"-\")[1] + \"-\" +\r\n            addTopicValue['endDate'].toString().split(\"-\")[0];\r\n\r\n        console.log(\"Go To DB With:\", addTopicValue);\r\n        this.onClickAddTopic();\r\n    }\r\n\r\n    createList = (low, high, diff) => {\r\n        let list = [];\r\n        for (let i = low; i <= high; i = i + diff) {\r\n            list.push(i);\r\n        }\r\n        return list;\r\n    }\r\n\r\n    renderSearch = () => {\r\n        let { search, headers } = this.state;\r\n        if (!search) {\r\n            return null;\r\n        }\r\n\r\n        let searchInputs = headers.map((header, idx) => {\r\n            let inputId = 'inp' + header.accessor;\r\n            let fixedValue = header.fixedValue || [];\r\n            return (\r\n                (header.searchType === 'input') ?\r\n                    <td key={idx} >\r\n                        <input type=\"text\" className=\"form-control\"\r\n                            ref={(input) => this[inputId] = input}\r\n                            style={{\r\n                                width: (header.accessor === 'trainers' || header.accessor === 'attendees') ?\r\n                                    (parseInt(header.width.toString().split(\"px\")[0]) + 30) + \"px\" :\r\n                                    header.width,\r\n                                textAlign: \"center\"\r\n                            }}\r\n                            data-idx={idx}\r\n                        />\r\n                    </td> :\r\n                    (header.searchType === 'list') ?\r\n                        <td key={idx}>\r\n                            <select ref={(input) => this[inputId] = input} className=\"btn btn-secondary\" style={{\r\n                                width: header.width,\r\n                                height: \"80%\",\r\n                                textAlign: \"center\"\r\n                            }} defaultValue=\"Select\"\r\n                            >\r\n                                {(header.accessor === 'duration') ?\r\n                                    fixedValue = this.createList(0.5, 20, 0.5) :\r\n                                    fixedValue\r\n                                }\r\n                                <option value=\"\">Select</option>\r\n                                {fixedValue.map(val => (\r\n                                    <option className=\"btn btn-light\" key={val} value={val}>\r\n                                        {val}{(header.accessor === 'duration') ? ' Hours' : ''}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </td> :\r\n                        (header.searchType === 'date') ?\r\n                            (console.log(this[inputId], header.accessor),\r\n                                this[inputId] = (this[inputId] === undefined) ? '' : this[inputId],\r\n                                <td key={idx}>\r\n                                    {/* {(this[inputId] === '') ? \"2020-01-01\" : this[inputId]} */}\r\n                                    <input type=\"date\" className='form-control'\r\n                                        name={header.accessor}\r\n                                        min=\"2000-01-01\"\r\n                                        onChange={(input) => this[inputId] = input.target.value}\r\n                                        style={{\r\n                                            width: \"145px\",\r\n                                            height: \"37px\",\r\n                                            fontSize: \"80%\",\r\n                                        }}\r\n                                        value={(this[inputId] === '') ? '' : this[inputId]}\r\n                                        data-idx={idx}\r\n                                    />\r\n                                </td>) :\r\n                            <td key={idx}><h4><b>Enter:</b></h4></td>\r\n            );\r\n\r\n        });\r\n\r\n        return (\r\n            <tr onChange={this.onSearch} style={{ height: \"80%\", width: \"70%\" }}>\r\n                {searchInputs}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    renderTable = () => {\r\n        let headerView = this.renderTableHeader();\r\n        let contentView = this.state.data.length > 0\r\n            ? this.renderContent()\r\n            : this.renderNoData();\r\n\r\n        return (\r\n            <table className=\"data-inner-table\">\r\n                <thead onClick={this.onSort} className='thead-dark'>\r\n                    <tr>\r\n                        {headerView}\r\n                    </tr>\r\n                </thead>\r\n                <tbody /* onDoubleClick={this.onShowEditor} */>\r\n                    {this.renderSearch()}\r\n                    {this.renderAddForm()}\r\n                    {contentView}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    onClickSearch = (e) => {\r\n        if (this.state.search) {\r\n            this.setState({\r\n                data: this._preSearchData,\r\n                search: false\r\n            }, () => {\r\n                this.onGotoPage(1);\r\n            });\r\n            this._preSearchData = null;\r\n            this.width = \"80%\";\r\n        } else {\r\n            this._preSearchData = this.state.data;\r\n            // this.width = \"60%\";\r\n            this.setState({\r\n                search: true\r\n            });\r\n        }\r\n    }\r\n\r\n    onClickAddTopic = () => {\r\n        this.setState({ addTopic: !this.state.addTopic });\r\n    }\r\n\r\n    renderAddForm = () => {\r\n        let { addTopic, headers } = this.state;\r\n        if (!addTopic) {\r\n            return null;\r\n        }\r\n        let addTopicValue = {\r\n            topicName: \"\", category: \"\", duration: \"\", startDate: \"\", endDate: \"\",\r\n            trainerType: \"\", trainers: \"\", attendees: \"\", teamName: \"\", remarks: \"\"\r\n        };\r\n\r\n        let addInputs = headers.map((header, idx) => {\r\n            // let inputId = 'inp' + header.accessor;\r\n            let fixedValue = header.fixedValue || [];\r\n            return (\r\n                (header.searchType === 'input') ?\r\n                    <td key={idx} >\r\n                        <input type=\"text\" className=\"form-control\"\r\n                            // ref={(input) => this[inputId] = input}\r\n                            onChange={(input) => addTopicValue[header.accessor] = input.target.value}\r\n                            style={{\r\n                                width: (header.accessor === 'trainers' || header.accessor === 'attendees') ?\r\n                                    (parseInt(header.width.toString().split(\"px\")[0]) + 30) + \"px\" :\r\n                                    header.width,\r\n                                textAlign: \"center\"\r\n                            }}\r\n                            data-idx={idx}\r\n                        />\r\n                    </td> :\r\n                    (header.searchType === 'list') ?\r\n                        <td key={idx}>\r\n                            <select defaultValue=\"Select\" className=\"btn btn-secondary\" style={{\r\n                                width: header.width,\r\n                                height: \"80%\",\r\n                                textAlign: \"center\"\r\n                            }}\r\n                                onChange={(input) => { addTopicValue[header.accessor] = input.target.value }}\r\n                            // ref={(input) => this[inputId] = input}\r\n                            >\r\n                                {(header.accessor === 'duration') ?\r\n                                    fixedValue = this.createList(0.5, 20, 0.5) :\r\n                                    fixedValue\r\n                                }\r\n                                <option value=\"\">Select</option>\r\n                                {fixedValue.map(val => (\r\n                                    <option className=\"btn btn-light\" key={val} value={val}>\r\n                                        {val}{(header.accessor === 'duration') ? ' Hours' : ''}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </td> :\r\n                        (header.searchType === 'date') ?\r\n                            <td key={idx}>\r\n                                <input type=\"date\" className='form-control'\r\n                                    name={header.accessor}\r\n                                    min=\"2000-01-01\"\r\n                                    onChange={(input) => addTopicValue[header.accessor] = input.target.value}\r\n                                    style={{\r\n                                        width: \"145px\",\r\n                                        height: \"37px\",\r\n                                        fontSize: \"80%\",\r\n                                    }}\r\n                                    data-idx={idx}\r\n                                />\r\n                            </td> :\r\n                            <td key={idx}>\r\n                                <button onClick={() => this.onAddTopic(addTopicValue)} className='btn btn-success'>\r\n                                    Save\r\n                                </button>\r\n                            </td>\r\n            );\r\n\r\n        });\r\n\r\n        return (\r\n            <tr /* onChange={this.onSearch} */ style={{ height: \"80%\", width: \"70%\" }}>\r\n                {addInputs}\r\n            </tr >\r\n        );\r\n    }\r\n\r\n    onClickCancel = () => {\r\n        if (this.state.search) { this.onClickSearch() }\r\n        else if (this.state.addTopic) { this.onClickAddTopic() }\r\n    }\r\n\r\n    renderToolbar = () => {\r\n        return (\r\n            <div className=\"toolbar\">\r\n                <h4>{this.state.title}</h4>\r\n                {(this.state.addTopic || this.state.search) ?\r\n                    <button onClick={this.onClickCancel} className='btn btn-danger' id='cancelbtn'>\r\n                        Cancel\r\n                    </button> :\r\n                    <><button onClick={this.onClickAddTopic} className='btn btn-dark' id='addbtn'>\r\n                        Add Topic\r\n                    </button>\r\n                        <button onClick={this.onClickSearch} className='btn btn-secondary' id='searchbtn'>\r\n                            Search\r\n                    </button></>\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    getPagedData = (pageNo, pageLength) => {\r\n        let startOfRecord = (pageNo - 1) * pageLength;\r\n        let endOfRecord = startOfRecord + pageLength;\r\n\r\n        let data = this.state.data;\r\n        let pagedData = data.slice(startOfRecord, endOfRecord);\r\n\r\n        return pagedData;\r\n    }\r\n\r\n    onPageLengthChange = (pageLength) => {\r\n        this.setState({\r\n            pageLength: parseInt(pageLength, 10),\r\n            currentPage: 1\r\n        }, () => {\r\n            this.onGotoPage(this.state.currentPage);\r\n        });\r\n    }\r\n\r\n    onGotoPage = (pageNo) => {\r\n        let pagedData = this.getPagedData(pageNo, this.state.pageLength);\r\n        this.setState({\r\n            pagedData: pagedData,\r\n            currentPage: pageNo\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.pagination.enabled) {\r\n            this.onGotoPage(this.state.currentPage);\r\n        }\r\n    }\r\n    /* static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (nextProps.data.length != prevState.data.length) {\r\n            return {\r\n                            headers: nextProps.headers,\r\n                data: nextProps.data,\r\n                sortby: prevState.sortby,\r\n                descending: prevState.descending,\r\n                search: prevState.search,\r\n                currentPage: 1,\r\n                pagedData: nextProps.data,\r\n            }\r\n        }\r\n        return null;\r\n    } */\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.className}>\r\n                {this.renderToolbar()}\r\n                {this.renderTable()}\r\n                {this.pagination.enabled &&\r\n\r\n                    <Pagination\r\n                        type={this.props.pagination.type}\r\n                        totalRecords={this.state.data.length}\r\n                        pageLength={this.state.pageLength}\r\n                        onPageLengthChange={this.onPageLengthChange}\r\n                        onGotoPage={this.onGotoPage}\r\n                        currentPage={this.state.currentPage}\r\n                    />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport DataTable from './Components/DataTable';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      headers: [],\n      data: [],\n      ready: false\n    };\n\n  }\n\n\n  /* onUpdateTable = (field, id, value) => {\n    let data = this.state.data.slice();\n    let updateRow = this.state.data.find((d) => {\n      return d[\"id\"] === id;\n    });\n\n    updateRow[field] = value;\n\n    this.setState({\n      edit: null,\n      data: data\n    });\n  } */\n\n  // todo:\n\n  componentDidMount() {\n    let headers = [\n      { title: \"Id\", accessor: \"id\", index: 0, dataType: \"number\", width: \"50px\", searchType: \"none\" },\n      { title: \"Topic\", accessor: \"topicName\", index: 1, dataType: \"string\", width: \"100px\", searchType: \"input\" },\n      {\n        title: \"Category\", accessor: \"category\", index: 2, dataType: \"string\", width: \"90px\", searchType: \"list\",\n        fixedValue: ['Technical', 'Behavioural', 'Domain Specific', 'Organizational']\n      },\n      { title: \"Duration\", accessor: \"duration\", index: 3, dataType: \"number\", width: \"90px\", searchType: \"list\" },\n      { title: \"Start Date\", accessor: \"startDate\", index: 4, dataType: \"string\", width: \"100px\", searchType: \"date\" },\n      { title: \"End Date\", accessor: \"endDate\", index: 5, dataType: \"string\", width: \"100px\", searchType: \"date\" },\n      {\n        title: \"Trainer Type\", accessor: \"trainerType\", index: 6, dataType: \"string\", width: \"95px\", searchType: \"list\",\n        fixedValue: ['External', 'Internal', 'Self']\n      },\n      { title: \"Trainers\", accessor: \"trainers\", index: 7, dataType: \"string\", width: \"70px\", searchType: \"input\" },\n      { title: \"Attendees\", accessor: \"attendees\", index: 8, dataType: \"string\", width: \"70px\", searchType: \"input\" },\n      { title: \"Team Name\", accessor: \"teamName\", index: 9, dataType: \"string\", width: \"95px\", searchType: \"input\" },\n      {\n        title: \"Remarks\", accessor: \"remarks\", index: 10, dataType: \"string\", width: \"90px\", searchType: \"list\",\n        fixedValue: ['Excellent', 'Very Good', 'Good', 'Average','Not That Level']\n      }\n    ];\n    axios.get('http://localhost:8008/Training/Topic/getTopics')\n      .then(Response => {\n        this.setState({\n          headers: headers,\n          data: Response.data,\n          ready: true\n        })\n      }, (error) => {\n        console.log(error);\n      })\n    return\n  }\n\n\n  render() {\n    return (\n      this.state.ready ?\n        <div>\n          <DataTable\n            // className=\"data-table\"\n            className='table table-striped'\n            title=\"TRAINING MONITORING\"\n            keyField=\"id\"\n            // edit={true}\n            pagination={{\n              enabled: true,\n              pageLength: 5,\n              type: \"long\"  // long, short\n            }}\n            width=\"80%\"\n            headers={this.state.headers}\n            data={this.state.data}\n            noData=\"No records!\"\n          // onUpdate={this.onUpdateTable}\n          />\n        </div>\n        : <h2>Loading..</h2>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}