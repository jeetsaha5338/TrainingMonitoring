{"version":3,"sources":["Components/Pagination/index.js","Components/DataTable/index.js","App.js","serviceWorker.js","index.js"],"names":["Pagination","props","onPageLengthChange","e","pageLengthInput","value","setState","currentPage","onPrevPage","state","onGotoPage","onNextPage","pages","pageNo","currentPageInput","_getPaginationButtons","text","classNames","key","id","className","onClick","onCurrentPageChange","this","totalRecords","pageLength","Math","ceil","pageSelector","type","min","ref","input","defaultValue","onChange","prevButton","nextButton","buttons","push","max","i","nextProps","prevState","Component","DataTable","_preSearchData","onDragOver","preventDefault","onDragStart","source","dataTransfer","setData","onDrop","target","getData","headers","srcHeader","targetHeader","temp","index","renderTableHeader","sort","a","b","map","header","title","accessor","width","sortby","descending","th","style","data-col","draggable","renderNoData","colSpan","length","noData","renderContent","data","pagination","enabled","pagedData","row","rowIdx","keyField","tds","content","data-id","data-row","onSort","slice","dom","ReactDOM","findDOMNode","colIndex","undefined","parentNode","cellIndex","colTitle","dataset","col","sortVal","onSearch","searchData","filter","show","fieldName","fieldValue","inputText","toString","toLowerCase","indexOf","renderSearch","search","searchInputs","idx","inputId","data-idx","renderTable","headerView","contentView","onClickSearch","renderToolbar","getPagedData","startOfRecord","endOfRecord","parseInt","React","App","ready","dataType","axios","get","then","Response","error","console","log","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.19ad70e5.chunk.js","sourcesContent":["import React, {Fragment, Component } from 'react';\r\nimport './pagination.css';\r\n\r\nexport default class Pagination extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentPage: props.currentPage || 1\r\n        }\r\n        \r\n    }\r\n\r\n    onPageLengthChange = (e) => {\r\n        this.props.onPageLengthChange(this.pageLengthInput.value);\r\n        this.setState({ currentPage : 1})\r\n    }\r\n\r\n    onPrevPage = (e) => {\r\n        if (this.state.currentPage === 1) return;\r\n        this.onGotoPage(this.state.currentPage - 1);\r\n    }\r\n\r\n    onNextPage = (e) => {\r\n        if (this.state.currentPage > this.pages - 1) return;\r\n        this.onGotoPage(this.state.currentPage + 1);\r\n    }\r\n\r\n    onGotoPage = (pageNo) => {\r\n        if (pageNo === this.state.currentPage) {\r\n            return;\r\n        }\r\n        if (this.currentPageInput) {\r\n            this.currentPageInput.value = pageNo;\r\n        }\r\n\r\n        this.setState({\r\n            currentPage: pageNo\r\n        });\r\n\r\n        this.props.onGotoPage(pageNo);\r\n    }\r\n      \r\n    _getPaginationButtons = (text) => {\r\n        let classNames = 'btn btn-light';\r\n        \r\n        // May need refactor\r\n        if (this.state.currentPage === text) {\r\n            classNames = 'btn btn-secondary';\r\n        }\r\n\r\n        let html = (\r\n            <button key={`btn-${text}`}\r\n                id={`btn-${text}`}\r\n                className={classNames}\r\n                onClick={(e)=>{this.onGotoPage(text)}}\r\n            >{text}\r\n            </button>\r\n        );\r\n        return html;\r\n    }\r\n\r\n    onCurrentPageChange = (e) => {\r\n        if (this.currentPageInput.value >= this.pages) {\r\n            this.currentPageInput.value = this.pages;\r\n        }\r\n        this.setState({\r\n            currentPage: this.currentPageInput.value\r\n        });\r\n\r\n        this.props.onGotoPage(this.currentPageInput.value);\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (nextProps.currentPage !== prevState.currentPage) {\r\n            return {\r\n               currentPage: nextProps.currentPage \r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let {totalRecords,pageLength} = this.props;\r\n        let { currentPage } = this.state;\r\n        let pages = Math.ceil(totalRecords / pageLength);\r\n        this.pages = pages;\r\n\r\n        let pageSelector = (\r\n            <Fragment key=\"f-page-selector\">\r\n                <span key=\"page-selector\" className=\"page-selector\">\r\n                    Rows per page -\r\n                    <input key=\"page-input\"\r\n                      type=\"number\"\r\n                      min=\"1\"\r\n                      ref={(input)=>this.pageLengthInput = input}\r\n                      defaultValue={pageLength || 5}\r\n                      onChange={this.onPageLengthChange}\r\n                    />\r\n                    - Showing <b>{(currentPage-1)*pageLength+1} \r\n                    - {(currentPage*pageLength > totalRecords)? totalRecords : currentPage*pageLength}\r\n                    </b> of <b>{totalRecords}</b> Records\r\n                </span>\r\n            </Fragment>\r\n        );\r\n\r\n        let prevButton = (\r\n            <button key=\"prev\"\r\n                className=\"btn btn-dark\"\r\n                onClick={this.onPrevPage}>\r\n                {\"< Previous\"}\r\n            </button>\r\n\r\n        );\r\n\r\n        let nextButton = (\r\n            <button key=\"next\"\r\n                className=\"btn btn-dark\"\r\n                onClick={this.onNextPage}>\r\n                {\"Next >\"}\r\n            </button>\r\n\r\n        );\r\n\r\n        let buttons = [];\r\n        if (this.props.type === \"short\" || (this.props.totalRecords/this.props.pageLength) > 15) {\r\n            buttons.push(\r\n                <input key=\"currentPageInput\"\r\n                    className=\"current-page-input\"\r\n                    type=\"number\"\r\n                    max={this.pages}\r\n                    defaultValue={this.state.currentPage}\r\n                    ref={(input)=>{this.currentPageInput=input}}\r\n                    onChange={this.onCurrentPageChange} />\r\n            );\r\n        }else if (this.props.type === \"long\") {\r\n            for(let i = 1; i <= pages; i++) {\r\n                buttons.push(this._getPaginationButtons(i));\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"pagination\">\r\n            {\r\n                [pageSelector, prevButton, buttons, nextButton]\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './datatable.css';\r\nimport Pagination from '../Pagination';\r\n\r\nexport default class DataTable extends React.Component {\r\n    _preSearchData = null\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            title: props.title || 'Data-Table',\r\n            headers: props.headers,\r\n            data: props.data,\r\n            pagedData: props.data,\r\n            sortby: null,\r\n            descending: null,\r\n            search: false,\r\n            pageLength: this.props.pagination.pageLength || 5,\r\n            currentPage: 1,\r\n        }\r\n\r\n        this.keyField = props.keyField || \"id\"; // TODO: revisit this logic\r\n        this.noData = props.noData || \"No records found!\";\r\n        this.width = props.width || \"100%\";\r\n\r\n        // Add pagination support\r\n        this.pagination = this.props.pagination || {};\r\n    }\r\n\r\n    onDragOver = (e) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    onDragStart = (e, source) => {\r\n        e.dataTransfer.setData('text/plain', source);\r\n    }\r\n\r\n    onDrop = (e, target) => {\r\n        e.preventDefault();\r\n        let source = e.dataTransfer.getData('text/plain');\r\n        let headers = [...this.state.headers];\r\n        let srcHeader = headers[source];\r\n        let targetHeader = headers[target];\r\n\r\n        let temp = srcHeader.index;\r\n        srcHeader.index = targetHeader.index;\r\n        targetHeader.index = temp;\r\n\r\n        this.setState({\r\n            headers\r\n        });\r\n    }\r\n\r\n    renderTableHeader = () => {\r\n        let { headers } = this.state;\r\n        headers.sort((a, b) => {\r\n            if (a.index > b.index) return 1;\r\n            return -1;\r\n        });\r\n\r\n        let headerView = headers.map((header, index) => {\r\n            let title = header.title;\r\n            let accessor = header.accessor;\r\n            let width = header.width;\r\n\r\n            if (this.state.sortby === index) {\r\n                title += this.state.descending ? '\\u2193' : '\\u2191';\r\n            }\r\n\r\n            return (\r\n                <th key={accessor}\r\n                    ref={(th) => this[accessor] = th}\r\n                    style={{ width: width }}\r\n                    data-col={accessor}\r\n                    // onDoubleClick = {()=>{alert('Double Click');}}\r\n                    onDragStart={(e) => this.onDragStart(e, index)}\r\n                    onDragOver={this.onDragOver}\r\n                    onDrop={(e) => { this.onDrop(e, index) }}>\r\n                    <span draggable data-col={accessor} className=\"header-cell\" style={{ width: width }}>\r\n                        {title}\r\n                    </span>\r\n                </th>\r\n            );\r\n        });\r\n\r\n        return headerView;\r\n    }\r\n\r\n    renderNoData = () => {\r\n        return (\r\n            <tr>\r\n                <td colSpan={this.props.headers.length}>\r\n                    {this.noData}\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    /* onUpdate = (e) => {\r\n        e.preventDefault();\r\n        let input = e.target.firstChild;\r\n        let header = this.state.headers[this.state.edit.cell];\r\n        let rowId = this.state.edit.rowId;\r\n \r\n        this.setState({\r\n            edit: null\r\n        });\r\n \r\n        this.props.onUpdate &&\r\n            this.props.onUpdate(header.accessor, rowId, input.value);\r\n    }\r\n \r\n    onFormReset = (e) => {\r\n        if (e.keyCode === 27) {  // ESC key\r\n            this.setState({\r\n                edit: null\r\n            });\r\n        }\r\n    }\r\n    onShowEditor = (e) => {\r\n       let id = e.target.dataset.id;\r\n       this.setState({\r\n           edit: {\r\n               row: parseInt(e.target.dataset.row, 10),\r\n               rowId: id,\r\n               cell: e.target.cellIndex\r\n           }\r\n       })\r\n   } */\r\n\r\n\r\n    renderContent = () => {\r\n\r\n        let { headers, data } = this.state;\r\n        data = this.pagination.enabled ? this.state.pagedData : this.state.data;\r\n\r\n        let contentView = data.map((row, rowIdx) => {\r\n            let id = row[this.keyField];\r\n            // let edit = this.state.edit;\r\n\r\n            let tds = headers.map((header, index) => {\r\n                let content = row[header.accessor];\r\n\r\n                /* if (this.props.edit) {\r\n                    if (header.dataType && (header.dataType === \"number\" ||\r\n                        header.dataType === \"string\") &&\r\n                        header.accessor !== this.keyField) {\r\n                        if (edit && edit.row === rowIdx && edit.cell === index) {\r\n                            content = (\r\n                                <form onSubmit={this.onUpdate}>\r\n                                    <input type=\"text\" defaultValue={content}\r\n                                        onKeyUp={this.onFormReset} />\r\n                                </form>\r\n                            );\r\n                        }\r\n\r\n                    }\r\n                } */\r\n\r\n                return (\r\n                    <td key={index} data-id={id} data-row={rowIdx}>\r\n                        {content} {(header.accessor === 'duration')? ' Hours' : ''}\r\n                    </td>\r\n                );\r\n            });\r\n            return (\r\n                <tr key={rowIdx}>\r\n                    {tds}\r\n                </tr>\r\n            );\r\n        });\r\n        return contentView;\r\n    }\r\n\r\n    onSort = (e) => {\r\n        let data = this.state.data.slice(); // Give new array\r\n        let dom = ReactDOM.findDOMNode(e.target);\r\n        let colIndex = dom.parentNode.cellIndex === undefined ? dom.cellIndex : dom.parentNode.cellIndex;\r\n        let colTitle = e.target.dataset.col;\r\n\r\n\r\n        let descending = !this.state.descending;\r\n\r\n        data.sort((a, b) => {\r\n            let sortVal = 0;\r\n            if (a[colTitle] < b[colTitle]) {\r\n                sortVal = -1;\r\n            } else if (a[colTitle] > b[colTitle]) {\r\n                sortVal = 1;\r\n            }\r\n            if (descending) {\r\n                sortVal = sortVal * -1;\r\n            }\r\n            return sortVal;\r\n        });\r\n\r\n        this.setState({\r\n            data: data,\r\n            pagedData: data,\r\n            sortby: colIndex,\r\n            descending\r\n        }, () => {\r\n            if (this.pagination.enabled) {\r\n                this.onGotoPage(1);\r\n            }\r\n        });\r\n    }\r\n\r\n    onSearch = (e) => {\r\n        let { headers } = this.state;\r\n\r\n        // Filter the records\r\n        let searchData = this._preSearchData.filter((row) => {\r\n            let show = true;\r\n            for (let i = 0; i < headers.length; i++) {\r\n                let fieldName = headers[i].accessor;\r\n                let fieldValue = row[fieldName];\r\n                let inputId = 'inp' + fieldName;\r\n                let inputText = this[inputId].value;\r\n                if (!fieldValue === '') {\r\n                    show = true;\r\n                } else {\r\n                    show = fieldValue.toString().toLowerCase().indexOf(inputText.toLowerCase()) > -1;\r\n                    if (!show) break;\r\n                }\r\n            }\r\n            return show;\r\n        });\r\n        // UPdate the state\r\n        this.setState({\r\n            data: searchData,\r\n            pagedData: searchData,\r\n            totalRecords: searchData.length\r\n        }, () => {\r\n            if (this.pagination.enabled) {\r\n                this.onGotoPage(1);\r\n            }\r\n        });\r\n    }\r\n\r\n    renderSearch = () => {\r\n        let { search, headers } = this.state;\r\n        if (!search) {\r\n            return null;\r\n        }\r\n\r\n        let searchInputs = headers.map((header, idx) => {\r\n            let inputId = 'inp' + header.accessor;\r\n            return (\r\n                <td key={idx}>\r\n                    <input type=\"text\"\r\n                        ref={(input) => this[inputId] = input}\r\n                        style={{\r\n                            width: \"95px\"\r\n                        }}\r\n                        data-idx={idx}\r\n                    />\r\n                </td>\r\n            );\r\n\r\n        });\r\n\r\n        return (\r\n            <tr onChange={this.onSearch}>\r\n                {searchInputs}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    renderTable = () => {\r\n        let headerView = this.renderTableHeader();\r\n        let contentView = this.state.data.length > 0\r\n            ? this.renderContent()\r\n            : this.renderNoData();\r\n\r\n        return (\r\n            <table className=\"data-inner-table\">\r\n                {/* <caption className=\"data-table-caption\">\r\n                    {title}\r\n                </caption> */}\r\n                <thead onClick={this.onSort} className='thead-dark'>\r\n                    <tr>\r\n                        {headerView}\r\n                    </tr>\r\n                </thead>\r\n                <tbody /* onDoubleClick={this.onShowEditor} */>\r\n                    {this.renderSearch()}\r\n                    {contentView}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    onClickSearch = (e) => {\r\n        if (this.state.search) {\r\n            this.setState({\r\n                data: this._preSearchData,\r\n                search: false\r\n            });\r\n            this._preSearchData = null;\r\n        } else {\r\n            this._preSearchData = this.state.data;\r\n            this.setState({\r\n                search: true\r\n            });\r\n        }\r\n    }\r\n\r\n    renderToolbar = () => {\r\n        return (\r\n            <div className=\"toolbar\">\r\n                <h4>{this.state.title}</h4>\r\n                <button onClick={this.onClickSearch} className='btn btn-primary'>\r\n                    Search\r\n                </button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    getPagedData = (pageNo, pageLength) => {\r\n        let startOfRecord = (pageNo - 1) * pageLength;\r\n        let endOfRecord = startOfRecord + pageLength;\r\n\r\n        let data = this.state.data;\r\n        let pagedData = data.slice(startOfRecord, endOfRecord);\r\n\r\n        return pagedData;\r\n    }\r\n\r\n    onPageLengthChange = (pageLength) => {\r\n        this.setState({\r\n            pageLength: parseInt(pageLength, 10),\r\n            currentPage : 1\r\n        }, () => {\r\n            this.onGotoPage(this.state.currentPage);\r\n        });\r\n    }\r\n\r\n    onGotoPage = (pageNo) => {\r\n        let pagedData = this.getPagedData(pageNo, this.state.pageLength);\r\n        this.setState({\r\n            pagedData: pagedData,\r\n            currentPage: pageNo\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.pagination.enabled) {\r\n            this.onGotoPage(this.state.currentPage);\r\n        }\r\n    }\r\n    /* static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (nextProps.data.length != prevState.data.length) {\r\n            return {\r\n                headers: nextProps.headers,\r\n                data: nextProps.data,\r\n                sortby: prevState.sortby,\r\n                descending: prevState.descending,\r\n                search: prevState.search,\r\n                currentPage: 1,\r\n                pagedData: nextProps.data,\r\n            }\r\n        }\r\n        return null;\r\n    } */\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.className}>\r\n                {this.renderToolbar()}\r\n                {this.renderTable()}\r\n                {this.pagination.enabled &&\r\n\r\n                    <Pagination\r\n                        type={this.props.pagination.type}\r\n                        totalRecords={this.state.data.length}\r\n                        pageLength={this.state.pageLength}\r\n                        onPageLengthChange={this.onPageLengthChange}\r\n                        onGotoPage={this.onGotoPage}\r\n                        currentPage={this.state.currentPage}\r\n                    />\r\n                }                \r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport DataTable from './Components/DataTable';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      headers: [],\n      data: [],\n      ready: false\n    };\n\n  }\n\n\n  /* onUpdateTable = (field, id, value) => {\n    let data = this.state.data.slice();\n    let updateRow = this.state.data.find((d) => {\n      return d[\"id\"] === id;\n    });\n\n    updateRow[field] = value;\n\n    this.setState({\n      edit: null,\n      data: data\n    });\n  } */\n\n  // todo:\n\n  componentDidMount() {\n    let headers = [\n      { title: \"Id\", accessor: \"id\", index: 0, dataType: \"number\" },\n      { title: \"Topic\", accessor: \"topicName\", index: 1, dataType: \"string\" },\n      { title: \"Category\", accessor: \"category\", index: 2, dataType: \"string\" },\n      { title: \"Duration\", accessor: \"duration\", index: 3, dataType: \"number\" },\n      { title: \"Start Date\", accessor: \"startDate\", index: 4, dataType: \"string\" },\n      { title: \"End Date\", accessor: \"endDate\", index: 5, dataType: \"string\" },\n      { title: \"Trainer Type\", accessor: \"trainerType\", index: 6, dataType: \"string\" },\n      { title: \"Trainers\", accessor: \"trainers\", index: 7, dataType: \"string\" },\n      { title: \"attendees\", accessor: \"attendees\", index: 8, dataType: \"string\" },\n      { title: \"Team Name\", accessor: \"teamName\", index: 9, dataType: \"string\" },\n      { title: \"Remarks\", accessor: \"remarks\", index: 10, dataType: \"string\" }\n    ];\n    axios.get('http://localhost:8008/Training/Topic/getTopics')\n      .then(Response => {\n        this.setState({\n          headers : headers,\n          data: Response.data,\n          ready: true\n        })\n      }, (error) => {\n        console.log(error);\n      })\n    return\n  }\n\n\n  render() {\n    return (\n      this.state.ready ?\n      <div>\n        <DataTable \n          // className=\"data-table\"\n          className='table table-striped'\n          title=\"Training Monitoring\"\n          keyField=\"id\"\n          // edit={true}\n          pagination={{\n            enabled: true,\n            pageLength: 5,\n            type: \"long\"  // long, short\n          }}\n          width=\"100%\"\n          headers={this.state.headers}\n          data={this.state.data}\n          noData=\"No records!\"\n        // onUpdate={this.onUpdateTable}\n        />\n      </div> \n      : <h2>Loading..</h2>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}